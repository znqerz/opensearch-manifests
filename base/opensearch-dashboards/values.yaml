# Copyright OpenSearch Contributors
# SPDX-License-Identifier: Apache-2.0

# Default values for opensearch-dashboards.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

opensearchHosts: "https://opensearch-cluster-master:9200"
replicaCount: 1

image:
  repository: "opensearchproject/opensearch-dashboards"
  # override image tag, which is .Chart.AppVersion by default
  tag: ""
  pullPolicy: "IfNotPresent"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: "opensearch-dashboard"

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "opensearch-sa"

rbac:
  create: false

# A list of secrets and their paths to mount inside the pod
# This is useful for mounting certificates for security and for mounting
# the X-Pack license
secretMounts:
  - name: opensearch-certs
    secretName: opensearch-dashboard-tls-key-pair
    path: /usr/share/opensearch-dashboards/certs
  # - name: ca-certs
  #   secretName: opensearch-ca-key-pair
  #   path: /usr/share/opensearch-dashboards/certs/ca
  - name: server-cert
    secretName: opensearch-tls-key-pair
    path: /usr/share/opensearch-dashboards/certs/ca

podAnnotations: {}

extraEnvs:
  - name: ELASTIC_PASSWORD
    value: "ieZoo4Xie1Ahl8id"
  - name: NODE_TLS_REJECT_UNAUTHORIZED
    value: "0"

envFrom: []

# extraVolumes:
#   - name: ca-cert
#     emptyDir: {}

# extraVolumeMounts:
#   - name: ca-cert
#     mountPath: /usr/share/opensearch-dashboards/certs/ca
#     readOnly: true

extraInitContainers:
  []
  # - name: init-script-downloader
  #   image: rancher/curlimages-curl:7.73.0
  #   args:
  #     - "-k"
  #     - "-o"
  #     - "/tmp/ca-root.pem" # we are saving downloaded file as init.sql in /tmp/data directory
  #     - "https://letsencrypt.org/certs/isrgrootx1.pem" # PROD root cert
  #     #- https://letsencrypt.org/certs/staging/letsencrypt-stg-root-x1.pem # STAGING root cert
  #   volumeMounts:
  #     - name: ca-cert # mount the volume where downloaded file will be saved
  #       mountPath: /tmp

extraContainers: ""

podSecurityContext: {}

securityContext:
  capabilities:
    drop:
      - ALL
  # readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

config:
  opensearch_dashboards.yml: |
    ---
    # Copyright OpenSearch Contributors
    # SPDX-License-Identifier: Apache-2.0

    # Description:
    # Default configuration for OpenSearch Dashboards
    # opensearch.ssl.verificationMode: none
    server.host: '0'
    opensearch.hosts: [https://localhost:9200]
    opensearch.username: kibanaserver
    opensearch.password: kibanaserver
    opensearch.requestHeadersWhitelist: [authorization, securitytenant]

    opensearch_security.multitenancy.enabled: true
    opensearch_security.multitenancy.tenants.preferred: [Private, Global]
    opensearch_security.readonly_mode.roles: [kibana_read_only]
    # Use this setting if you are running opensearch-dashboards without https
    opensearch_security.cookie.secure: false

    # append configs
    # config opensearch dashboard tsl feature
    server.ssl.enabled: false    
    server.ssl.key: /usr/share/opensearch-dashboards/certs/tls.key
    server.ssl.certificate: /usr/share/opensearch-dashboards/certs/tls.crt

    opensearch.ssl.verificationMode: certificate
    opensearch.ssl.certificateAuthorities: ["/usr/share/opensearch-dashboards/certs/ca/ca.crt"]
    opensearch_security.multitenancy.tenants.enable_global: true
    opensearch_security.multitenancy.tenants.enable_private: true

priorityClassName: ""

opensearchAccount:
  {}
  # secret: "opensearch-dashboards-account"
  # keyPassphrase:
  #   enabled: true

labels: {}

hostAliases: []
# - ip: "127.0.0.1"
#   hostnames:
#   - "foo.local"
#   - "bar.local"

serverHost: "0.0.0.0"

service:
  type: ClusterIP
  port: 5601
  loadBalancerIP: ""
  nodePort: ""
  labels: {}
  annotations: {}
  loadBalancerSourceRanges: []
  # 0.0.0.0/0
  httpPortName: http

ingress:
  enabled: false
  # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
  # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
  # ingressClassName: nginx
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          backend:
            serviceName: chart-example.local
            servicePort: 80
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  requests:
    cpu: "100m"
    memory: "512M"
  limits:
    cpu: "100m"
    memory: "512M"

autoscaling:
  # This requires metrics server to be installed, to install use kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
  # See https://github.com/kubernetes-sigs/metrics-server
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80

updateStrategy:
  type: "Recreate"

nodeSelector: {}

tolerations: []

affinity: {}

# -- Array of extra K8s manifests to deploy
extraObjects:
  []
  # - apiVersion: secrets-store.csi.x-k8s.io/v1
  #   kind: SecretProviderClass
  #   metadata:
  #     name: argocd-secrets-store
  #   spec:
  #     provider: aws
  #     parameters:
  #       objects: |
  #         - objectName: "argocd"
  #           objectType: "secretsmanager"
  #           jmesPath:
  #               - path: "client_id"
  #                 objectAlias: "client_id"
  #               - path: "client_secret"
  #                 objectAlias: "client_secret"
  #     secretObjects:
  #     - data:
  #       - key: client_id
  #         objectName: client_id
  #       - key: client_secret
  #         objectName: client_secret
  #       secretName: argocd-secrets-store
  #       type: Opaque
  #       labels:
  #         app.kubernetes.io/part-of: argocd
